
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package expressionParser;

import java.util.HashMap;
import java.util.LinkedList;
import net.sf.javabdd.BDD;
import main.BddManager;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class FeatureModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FeatureModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public FeatureModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FeatureModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\005" +
    "\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\030\002\uffff\004\013\005\004\006\010\011" +
    "\014\012\005\015\011\016\016\017\012\020\015\021\017" +
    "\001\002\000\014\002\ufff5\007\ufff5\010\ufff5\013\ufff5\014" +
    "\ufff5\001\002\000\026\004\013\005\004\006\010\011\014" +
    "\012\005\015\011\016\016\017\012\020\015\021\017\001" +
    "\002\000\010\002\001\007\022\010\024\001\002\000\004" +
    "\002\047\001\002\000\014\002\ufff4\007\ufff4\010\ufff4\013" +
    "\ufff4\014\ufff4\001\002\000\004\012\044\001\002\000\004" +
    "\012\041\001\002\000\014\002\ufff3\007\ufff3\010\ufff3\013" +
    "\ufff3\014\ufff3\001\002\000\026\004\013\005\004\006\010" +
    "\011\014\012\005\015\011\016\016\017\012\020\015\021" +
    "\017\001\002\000\004\012\035\001\002\000\004\012\027" +
    "\001\002\000\004\012\020\001\002\000\026\004\013\005" +
    "\004\006\010\011\014\012\005\015\011\016\016\017\012" +
    "\020\015\021\017\001\002\000\010\007\022\010\024\013" +
    "\023\001\002\000\026\004\013\005\004\006\010\011\014" +
    "\012\005\015\011\016\016\017\012\020\015\021\017\001" +
    "\002\000\014\002\ufff7\007\ufff7\010\ufff7\013\ufff7\014\ufff7" +
    "\001\002\000\026\004\013\005\004\006\010\011\014\012" +
    "\005\015\011\016\016\017\012\020\015\021\017\001\002" +
    "\000\014\002\ufffd\007\022\010\ufffd\013\ufffd\014\ufffd\001" +
    "\002\000\014\002\ufffe\007\ufffe\010\ufffe\013\ufffe\014\ufffe" +
    "\001\002\000\026\004\013\005\004\006\010\011\014\012" +
    "\005\015\011\016\016\017\012\020\015\021\017\001\002" +
    "\000\004\013\034\001\002\000\012\007\022\010\024\013" +
    "\ufff1\014\032\001\002\000\026\004\013\005\004\006\010" +
    "\011\014\012\005\015\011\016\016\017\012\020\015\021" +
    "\017\001\002\000\004\013\ufff2\001\002\000\014\002\ufffa" +
    "\007\ufffa\010\ufffa\013\ufffa\014\ufffa\001\002\000\026\004" +
    "\013\005\004\006\010\011\014\012\005\015\011\016\016" +
    "\017\012\020\015\021\017\001\002\000\004\013\037\001" +
    "\002\000\014\002\ufff8\007\ufff8\010\ufff8\013\ufff8\014\ufff8" +
    "\001\002\000\014\002\ufffc\007\ufffc\010\ufffc\013\ufffc\014" +
    "\ufffc\001\002\000\026\004\013\005\004\006\010\011\014" +
    "\012\005\015\011\016\016\017\012\020\015\021\017\001" +
    "\002\000\004\013\043\001\002\000\014\002\ufff9\007\ufff9" +
    "\010\ufff9\013\ufff9\014\ufff9\001\002\000\026\004\013\005" +
    "\004\006\010\011\014\012\005\015\011\016\016\017\012" +
    "\020\015\021\017\001\002\000\004\013\046\001\002\000" +
    "\014\002\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb\001\002" +
    "\000\004\002\000\001\002\000\010\007\022\010\024\013" +
    "\051\001\002\000\014\002\ufff6\007\ufff6\010\ufff6\013\ufff6" +
    "\014\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\004\003\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\020\001\001\000\002\001\001\000\004\003\025\001\001" +
    "\000\002\001\001\000\004\003\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\030\005\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\030\005" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\030\005\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\030\005\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\030\005" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FeatureModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FeatureModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FeatureModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  @Override
  public void report_error(String message, Object info) {
    String errorString = message;
    if (info != null) {
      errorString += " near " + info;
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$FeatureModelParser$actions {
  private final FeatureModelParser parser;

  /** Constructor */
  CUP$FeatureModelParser$actions(FeatureModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FeatureModelParser$do_action(
    int                        CUP$FeatureModelParser$act_num,
    java_cup.runtime.lr_parser CUP$FeatureModelParser$parser,
    java.util.Stack            CUP$FeatureModelParser$stack,
    int                        CUP$FeatureModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FeatureModelParser$result;

      /* select the action based on the action number */
      switch (CUP$FeatureModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpressionList ::= Expression 
            {
              LinkedList<BDD> RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 LinkedList<BDD> lst = new LinkedList<BDD>(); lst.addFirst(e1); RESULT = lst; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",3, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ExpressionList ::= Expression COMMA ExpressionList 
            {
              LinkedList<BDD> RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		LinkedList<BDD> lst1 = (LinkedList<BDD>)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 lst1.addFirst(e1); RESULT = lst1; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",3, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= IDENTIFIER 
            {
              BDD RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 
			 		String id = i.toString();
			 		BDD var = BddManager.getVariableRegion(id);
			 		//RESULT = Choco.eq(1, var); 
			 		RESULT = var;
			 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= FALSE 
            {
              BDD RESULT =null;
		 RESULT = BddManager.falseFormula; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= TRUE 
            {
              BDD RESULT =null;
		 RESULT = BddManager.trueFormula; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= OBRACKETS Expression CBRACKETS 
            {
              BDD RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = e1; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression ::= DEFINED OBRACKETS Expression CBRACKETS 
            {
              BDD RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = e1; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression ::= ONE_OF_OR_NONE OBRACKETS ExpressionList CBRACKETS 
            {
              BDD RESULT =null;
		LinkedList<BDD> lst1 = (LinkedList<BDD>)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = main.BDDUtils.oneOfOrNone(lst1.toArray(new BDD[]{})); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= SOME_OF OBRACKETS ExpressionList CBRACKETS 
            {
              BDD RESULT =null;
		LinkedList<BDD> lst1 = (LinkedList<BDD>)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = main.BDDUtils.someOf(lst1.toArray(new BDD[]{})); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= NONE_OF OBRACKETS ExpressionList CBRACKETS 
            {
              BDD RESULT =null;
		LinkedList<BDD> lst1 = (LinkedList<BDD>)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = main.BDDUtils.noneOf(lst1.toArray(new BDD[]{})); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= ONE_OF OBRACKETS ExpressionList CBRACKETS 
            {
              BDD RESULT =null;
		LinkedList<BDD> lst1 = (LinkedList<BDD>)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = main.BDDUtils.oneOf(lst1.toArray(new BDD[]{})); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression ::= NOT Expression 
            {
              BDD RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = e1.not(); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression ::= Expression OR Expression 
            {
              BDD RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		BDD e2 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = e1.or(e2); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expression ::= Expression AND Expression 
            {
              BDD RESULT =null;
		BDD e1 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		BDD e2 = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = e1.and(e2); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              BDD RESULT =null;
		 RESULT = BddManager.trueFormula; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		BDD start_val = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		RESULT = start_val;
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$FeatureModelParser$parser.done_parsing();
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Expression 
            {
              BDD RESULT =null;
		BDD e = (BDD)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

